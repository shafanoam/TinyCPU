################################################################
#                     Command Line System                      #
#                 For the TinyCPU architecture                 #
#              Created by shafanoam late May 2023              #
#                                                              #
#                      List of commands:                       #
#       * hi                displays the word 'Hello!'         #
#       * die               permanently halts the CPU          #
#       * echo *str*        parrots the argument               #
#       * cls               clears the screen                  #
#       * fib               displays the fibonacci sequence    #
#                                                              #
################################################################


# ### system variables

# ## constants
var one 1
var thirtyTwo 32

# ## ascii codes
var ascii_enter 10
var ascii_backspace 08
var ascii_space 32
# for command 'die'
var ascii_d 100
# for command 'echo'
var ascii_e 101
# for command 'hi'
var ascii_h 104
# for command 'fib'
var ascii_f 102
# for command 'cls'
var ascii_c 99

# ## for command parsing
var letter_being_tested 0

# ## for console library
var charAddress 0
var messageLength 0
var cin_address 0

# ### preset messages
# # system startup
message 0xeec COMMANDER Loading:
# # General prompt
message 0xee6 Ready.
# # result of 'hi' instruction
message 0xee0 Hello!
# # unknown command
message 0xed0 UNKNOWN COMMAND!
# ## starting addresses of the above messages, in that order
data 0xf00 4
ec
e6
e0
d0
# ## length of the above messages, in that order
data 0xf20 4
12
06
06
10

.setup
# message: COMMANDER Loading:
lda 0xf00
sta @charAddress
lda 0xf20
sta @messageLength
cal .cout


.command_loop

# message: \n + Ready. + \n
lda @ascii_enter
sta 0xffd
# used for 'cls' command
.cls_jump_in_point
lda 0xf01
sta @charAddress
lda 0xf21
sta @messageLength
cal .cout
lda @ascii_enter
sta 0xffd

#input
cal .cin

lda @ascii_enter
sta 0xffd


# test for 'hi'
lda @ascii_h
mov a, b
lda 0xe00
# now have the ascii char being tested in b, and the actual char in a
sub b, a
# if zero then there's a match
snz
jmp .hello

# test for 'echo'
lda @ascii_e
mov a, b
lda 0xe00
# now have the ascii char being tested in b, and the actual char in a
sub b, a
# if zero then there's a match
snz
jmp .echo

# test for 'fib'
lda @ascii_f
mov a, b
lda 0xe00
# now have the ascii char being tested in b, and the actual char in a
sub b, a
# if zero then there's a match
snz
jmp .fib

# test for 'cls'
lda @ascii_c
mov a, b
lda 0xe00
# now have the ascii char being tested in b, and the actual char in a
sub b, a
# if zero then there's a match
snz
jmp .cls

# test for 'die'
lda @ascii_d
mov a, b
lda 0xe00
# now have the ascii char being tested in b, and the actual char in a
sub b, a
# if zero then there's a match
snz
jmp .exit





# if no command is detected execution will end up here
lda 0xf03
sta @charAddress
lda 0xf23
sta @messageLength
cal .cout
jmp .command_loop



.exit
hlt
jmp .exit

.hello
lda 0xf02
sta @charAddress
lda 0xf22
sta @messageLength
cal .cout
jmp .command_loop


.fib
lda @one
mov a, b
sta 0xfff

.fibonacci_loop
mov a, c
mov b, a
mov c, b
add b, a
snc
jmp .command_loop
jmp .fib_delay

# just here to make a delay lmao
.fib_delay
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
mov a, a
sta 0xfff
jmp .fibonacci_loop


.cls
lda @one
mov a, b
sub a, a
sub b, a
sta 0xffd
jmp .cls_jump_in_point


.echo
cal .remove_command_from_input
# prepare to print
lda .remcom_char_load_location
add c, a
sta @charAddress
mov d, a
sub c, a
sta 0xfff
sta @messageLength

# print and exit, starting with a newline so it isn't on the same line
cal .cout
jmp .command_loop


.remove_command_from_input
lda @ascii_space
mov a, b
lda @messageLength
mov a, d
lda @one
mov a, c
sub a, a
sta .remcom_char_load_location

cal .remove_command_from_input_loop


.remove_command_from_input_loop

..remcom_char_load_location
lda 0xe00

# compare to ascii_space
sub b, a

# if zero then return, otherwise continue again
snz
ret
# for alignment
mov a, a

# add one to the load location
lda .remcom_char_load_location
add c, a
sta .remcom_char_load_location

# subtract one from messageLength
mov d, a
sub c, a
mov a, d

# repeat
jmp .remove_command_from_input_loop











# #### LIBRARIES!!!!! DO NOT TOUCH!

# ### Console Out Function
.cout

# initial setup
lda @messageLength
mov a, b
lda @one
mov a, c
# now have length of message in b, and 01 in c for subtraction

.cout_standard_loop

# start address to a
lda @charAddress

# storing it where the lower 8 bits in the load character will be
sta .loadlocation_for_cout

# store in D temporarily
mov a, d

#outputs the current character
..loadlocation_for_cout
lda 0xe00
sta 0xffd

# Add one value to address then store for later use
mov d, a
add c, a
sta @charAddress

# subtract 1 from b, if it's now zero then return else repeat loop
mov b, a
sub c, a
mov a, b
snz
jmp .cout_return_to_main
jmp .cout_standard_loop

.cout_return_to_main
ret



# ### Console Input Function
.cin

# initial setup

# setup chars_left to be -32 so that adding 1 per character sets the zero flag once the limit is reached
lda @thirtyTwo
mov a, b
sub b, a
sub b, a
mov a, b

lda @one
mov a, c

lda @cin_address
sub a, a
sta @cin_address

# now have chars_left at -32 in b and 01 in c, and cin_address is set to 0


.cin_standard_loop

# start address to a
lda @cin_address

# storing it where the lower 8 bits in the store character will be
sta .storelocation_for_cin


# halt and wait for character input
hlt

# add 1 to cin_address and store for later
add c, a
sta @cin_address


# once input is detected:
lda 0xffc


# store for comparison to ascii_enter and ascii_backspace
mov a, d

# check if enter; therefore it's finished
lda @ascii_enter
sub d, a

# if zero then match, so return else continue
snz
jmp .cin_end

# check if backspace; therefore remove the last character
lda @ascii_backspace
sub d, a

# if zero then match, so return else continue
snz
jmp .cin_deal_with_backspaces


# if not enter or backspace, continue:

# restore current char and store in the variable place
mov d, a
..storelocation_for_cin
sta 0xe00
# also output to screen lol
sta 0xffd

# add one to the chars left, if the carry flag has been set then the 32 char limit has been reached and we can return.
mov b, a
add c, b
snc
jmp .cin_end

jmp .cin_standard_loop


.cin_deal_with_backspaces

lda @cin_address
# subtract here in addition to later b/c there's an automatic increment we have to account for
sub c, a
sta @cin_address


# double check that message length isn't already at zero
lda @thirtyTwo
add b, a
snz
jmp .cin_standard_loop

.cin_deal_with_backspaces_continue
mov b, a
sub c, b

lda @cin_address
sub c, a
sta @cin_address

mov d, a
sta 0xffd

jmp .cin_standard_loop

.cin_end
# make sure to save message_length for future use
lda @thirtyTwo
add b, a
sta @messageLength
ret