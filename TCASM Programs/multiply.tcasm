# start variables- x, y, 1
data 0x100 4
0f
04
01
00


.start
# generates start state; A: start B: start C: 1 D:multiplicand
lda 0x102
mov a, c
lda 0x101
mov a, d
lda 0x100
mov a, b
sta 0xfff
sta 0x103

.multiply_loop
lda 0x103
# add start and show to hex display
add a, b
sta 0xfff
sta 0x103
#subtract loop by 1
mov d, a
sub c, a
mov a, d

# do again if multiplicand isn't 0
snz
jmp .end_wait_for_reset
jmp .multiply_loop


.end_wait_for_reset
hlt
jmp .start